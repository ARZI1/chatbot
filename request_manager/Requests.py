import abc
from enum import Enum


class RequestType(Enum):
    """
    Contains all request types in enum form.
    """
    NONE = -1
    QUESTION = 0
    ARTICLE = 1


class Request:
    """
    An abstract request class.

    Attributes:
        request_type: an enum containing the request type.
        token_handler: a reference to a function which handles generated tokens.
        active: whether the request is still active.
        waiting_for_response: whether the request is waiting for a response from a compute server.
    """
    def __init__(self, request_type):
        self.request_type = request_type
        self.token_handler = None
        self.active = True
        self.waiting_for_response = False

    @abc.abstractmethod
    def get_compute_data(self):
        """
        Gets the necessary data for sending a compute request.

        :return: the prompt along with inference parameters.
        """

    @abc.abstractmethod
    def handle_compute_result(self, token):
        """
        Called when the compute server returns a result.

        :param token: the token generated by the computer server.
        """

    @abc.abstractmethod
    def set_token_handler(self, token_handler):
        """
        Sets the request's token handler. This method will be called every time a new token is generated for the request.

        :param token_handler: a reference to the callback method.
        """


class QuestionRequest(Request):
    """
    Implementation of a question request, which gets sent to the chatbot.

    Attributes:
        prompt: contains the current generated article, sent to the compute server to generate the next token.
        inference_config: the inference configuration for the request, temperature and top_p.
    """

    def __init__(self, prompt, temp, top_p):
        """
        Create a question request object.

        :param prompt: the user's question.
        :param temp: the sampler's temperature.
        :param top_p: the sampler's top_p value.
        """
        super().__init__(RequestType.QUESTION)
        self.content = f'Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\n{prompt}\n\n### Response:\n'
        self.inference_config = (temp, top_p)

    def get_compute_data(self):
        """
        Gets the compute tasks's parameters.

        :return: the prompt and inference config for the compute task.
        """
        self.waiting_for_response = True

        return self.content, self.inference_config

    def handle_compute_result(self, token):
        """
        Handles a compute server result. Calls the request's token handler.

        :param token: the token generated by the computer server.
        """
        self.waiting_for_response = False

        if token == '</s>':
            self.active = False
        else:
            self.content += token

        if self.token_handler is not None:
            self.token_handler(token)

    def set_token_handler(self, token_handler):
        """
        Adds a token handler to the request. The token handler will get called every time a new token is generated for the response.
        :param token_handler: a reference to the token handler method.
        """
        self.token_handler = token_handler


class ArticleRequest(Request):
    """
    Implementation of an article request.

    Attributes:
        prompt: contains the current generated article, sent to the compute server to generate the next token.
        inference_config: the inference configuration for the request, temperature and top_p.
    """
    def __init__(self, prompt, temp, top_p):
        """
        Create an article request object.

        :param prompt: the starting prompt by the user, can be empty.
        :param temp: the sampler's temperature.
        :param top_p: the sampler's top_p value.
        """
        super().__init__(RequestType.ARTICLE)
        self.content = prompt
        self.inference_config = (temp, top_p)

    def get_compute_data(self):
        """
        Gets the compute tasks's parameters.

        :return: the prompt and inference config for the compute task.
        """
        self.waiting_for_response = True

        return self.content, self.inference_config

    def handle_compute_result(self, token):
        """
        Handles a compute server result. Calls the request's token handler.

        :param token: the token generated by the computer server.
        """
        self.waiting_for_response = False

        # if and end-of-text token has been generated, this request is done and therefore no longer active
        if token == '</s>':
            self.active = False
        else:
            self.content += token

        if self.token_handler is not None:
            self.token_handler(token)

    def set_token_handler(self, token_handler):
        """
        Adds a token handler to the request. The token handler will get called every time a new token is generated for the response.
        :param token_handler: a reference to the token handler method.
        """
        self.token_handler = token_handler
